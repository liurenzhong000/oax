<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oax.mapper.front.TradeMapper">
    <resultMap id="BaseResultMap" type="com.oax.entity.front.Trade">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="market_id" jdbcType="INTEGER" property="marketId" />
        <result column="order_id" jdbcType="INTEGER" property="orderId" />
        <result column="type" jdbcType="INTEGER" property="type" />
        <result column="match_order_id" jdbcType="INTEGER" property="matchOrderId" />
        <result column="price" jdbcType="DECIMAL" property="price" />
        <result column="qty" jdbcType="DECIMAL" property="qty" />
        <result column="fee_coin_id" jdbcType="INTEGER" property="feeCoinId" />
        <result column="fee" jdbcType="DECIMAL" property="fee" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>
    <sql id="Base_Column_List">
        id, market_id, order_id, `type`, match_order_id, price, qty, fee_coin_id, fee, create_time,left_coin_name,right_coin_name,
        update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from oax.trade
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from oax.trade
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.oax.entity.front.Trade">
        insert into oax.trade (market_id, order_id,
                           type, match_order_id, price,
                           qty, fee_coin_id, fee,user_id,order_type,left_coin_id,left_coin_name,right_coin_id,right_coin_name,
                           create_time, update_time)
        values (#{marketId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER},
            #{type,jdbcType=INTEGER}, #{matchOrderId,jdbcType=INTEGER}, #{price,jdbcType=DECIMAL},
            #{qty,jdbcType=DECIMAL}, #{feeCoinId,jdbcType=INTEGER}, #{fee,jdbcType=DECIMAL},
            #{userId,jdbcType=INTEGER},
            #{orderType,jdbcType=INTEGER},
        	#{leftCoinId,jdbcType=INTEGER},
        	#{leftCoinName,jdbcType=VARCHAR},
        	#{rightCoinId,jdbcType=INTEGER},
        	#{rightCoinName,jdbcType=VARCHAR},
            now(), now())
    </insert>
    <insert id="insertSelective" parameterType="com.oax.entity.front.Trade">
        insert into oax.trade
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="marketId != null">
                market_id,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="matchOrderId != null">
                match_order_id,
            </if>
            <if test="price != null">
                price,
            </if>
            <if test="qty != null">
                qty,
            </if>
            <if test="feeCoinId != null">
                fee_coin_id,
            </if>
            <if test="fee != null">
                fee,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="marketId != null">
                #{marketId,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="matchOrderId != null">
                #{matchOrderId,jdbcType=INTEGER},
            </if>
            <if test="price != null">
                #{price,jdbcType=DECIMAL},
            </if>
            <if test="qty != null">
                #{qty,jdbcType=DECIMAL},
            </if>
            <if test="feeCoinId != null">
                #{feeCoinId,jdbcType=INTEGER},
            </if>
            <if test="fee != null">
                #{fee,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.oax.entity.front.Trade">
        update oax.trade
        <set>
            <if test="marketId != null">
                market_id = #{marketId,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="matchOrderId != null">
                match_order_id = #{matchOrderId,jdbcType=INTEGER},
            </if>
            <if test="price != null">
                price = #{price,jdbcType=DECIMAL},
            </if>
            <if test="qty != null">
                qty = #{qty,jdbcType=DECIMAL},
            </if>
            <if test="feeCoinId != null">
                fee_coin_id = #{feeCoinId,jdbcType=INTEGER},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.oax.entity.front.Trade">
        update oax.trade
        set market_id = #{marketId,jdbcType=INTEGER},
            order_id = #{orderId,jdbcType=INTEGER},
            type = #{type,jdbcType=INTEGER},
            match_order_id = #{matchOrderId,jdbcType=INTEGER},
            price = #{price,jdbcType=DECIMAL},
            qty = #{qty,jdbcType=DECIMAL},
            fee_coin_id = #{feeCoinId,jdbcType=INTEGER},
            fee = #{fee,jdbcType=DECIMAL},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>



    <select id="getTradeList" resultType="com.oax.entity.front.TradeInfo">
        SELECT
        a.id,
        DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i:%s') createTime ,
        a.price,a.qty,a.order_type type
        FROM
        oax.trade a
        <where>
            a.market_id = #{marketId}
            <!--如果查询市场交易信息只需查主动撮合类型的 -->
            <if test="userId==null">
                and a.type =1
            </if>
            <!--如果是查询用户的交易信息 不需加类型限制 -->
            <if test="userId!=null and userId!=''">
                and a.user_id = #{userId}
            </if>
        </where>
        ORDER BY a.id DESC limit 31
    </select>


    <select id="getByUserIdQueryTrade" parameterType="com.oax.entity.admin.param.TradesParam"
            resultType="com.oax.entity.admin.vo.TradesVo">
        select concat(t.left_coin_name,"/", t.right_coin_name) dealTroops, t.price, t.qty,
        round((t.price * t.qty), 8) main,
        t.fee fee, t.create_time createTime, o.type buyOrSell,
        t.right_coin_name bazaarCoin, t.left_coin_name targetCoin
        from oax.trade t
        left join oax.orders o on t.order_id = o.id
        where o.user_id = #{userId}
        <if test="coinId != null and coinId != ''">
            and t.left_coin_id = #{coinId}
        </if>
        <if test="beginTime != null">
            and t.create_time &gt;= #{beginTime}
        </if>
        <if test="endTime != null">
            and t.create_time &lt;= #{endTime}
        </if>
        <if test="buyOrSell != null">
            and o.type = #{buyOrSell}
        </if>
        order by t.create_time desc
    </select>

    <select id="selectByTradePageParam" resultType="com.oax.entity.admin.vo.TradePageVo">
        select
        td.id `id`,
        od.user_id `user_id`,
        od.id `orderId`,
        td.match_order_id `match_order_id`,
        td.left_coin_name `marketCoin`,
        td.right_coin_name `marketCategoryCoin`,
        td.price `price`,
        td.qty `qty`,
        ifnull(td.price ,0) * ifnull(td.qty ,0) `totalPrices`,
        td.fee `fee`,
        td.type `tradeType`,
        od.type `orderType`,
        td.create_time `createTime`
        from oax.trade td
        left join oax.orders od on td.order_id = od.id
        <where>
            <if test="orderId!=null">
                and od.id = #{orderId}
            </if>
            <if test="marketId!=null">
                and od.market_id = #{marketId}
            </if>
            <if test="orderType!=null">
                and od.type = #{orderType}
            </if>
            <if test="startTime != null and endTime!= null">
                and td.create_time between #{startTime} and #{endTime}
            </if>

        </where>
        order by
        <if test="sortTotalPrices != null">
            <if test="sortTotalPrices ==0">
                totalPrices

            </if>
            <if test="sortTotalPrices ==1">
                totalPrices desc
            </if>
        </if>

        <if test="sortPrice != null">
            <if test="sortPrice == 0">
                td.price
            </if>
            <if test="sortPrice == 1">
                td.price desc
            </if>
        </if>

        <if test="sortQty != null">
            <if test="sortQty == 0">
                td.qty
            </if>
            <if test="sortQty == 1">
                td.qty desc
            </if>
        </if>

        <if test="sortTotalPrices == null and sortPrice == null and sortQty == null">
            td.create_time desc
        </if>

    </select>

    <select id="selectLastPriceByCoinIdAndEthId" parameterType="java.lang.Integer"
            resultType="com.oax.entity.front.MarketPriceInfo">
        SELECT
            t.market_id    id,
            t.price,
            o.left_coin_id coinId
        FROM
            trade t LEFT JOIN orders o on o.id = t.order_id
        where o.right_coin_id = #{userId} and o.left_coin_id = #{userId}
    </select>
    <select id="selectByCoinIdAndTime" resultType="com.oax.entity.front.Trade">
        select
        <include refid="Base_Column_List"/>
        from oax.trade
        where fee_coin_id = #{coinId}
        and create_time >= #{startTime}
        and #{endTime} >= create_time
    </select>
    <select id="countTradeFee" resultType="com.oax.entity.admin.vo.TradeFeeVo">
        SELECT
            c.id coinId,
            c.short_name coinName,
            IFNULL(t1.buyerFee,0) buyerFee,
            IFNULL(t2.sellFee,0) sellFee,
            (IFNULL(t1.buyerFee,0)+IFNULL(t2.sellFee,0)) countFee
         from oax.coin c
        LEFT JOIN
        (select fee_coin_id,sum(fee) buyerFee from  oax.trade
            where order_type =1
              <if test="beginTime!=null">
                and create_time >=#{beginTime}
              </if>
              <if test="endTime!=null">
                and #{endTime} >= create_time
              </if>
             <if test="coinId!=null">
                 and fee_coin_id=#{coinId}
             </if>
             GROUP BY  fee_coin_id ) t1
        on t1.fee_coin_id = c.id
        LEFT JOIN
        (select fee_coin_id,sum(fee) sellFee from  oax.trade
            where order_type =2
            <if test="beginTime!=null">
                and create_time >=#{beginTime}
            </if>
            <if test="endTime!=null">
                and #{endTime} >= create_time
            </if>
            <if test="coinId!=null">
                and fee_coin_id=#{coinId}
            </if>
            GROUP BY  fee_coin_id) t2
        on t2.fee_coin_id = c.id
        <where>
            <if test="coinId!=null">
                c.id = #{coinId}
            </if>
        </where>
    </select>
    <select id="selectByleftCoinIdAndrightCoinId" resultType="com.oax.entity.front.Trade">

        select
            <include refid="Base_Column_List"/>
        from oax.trade
        where left_coin_id = #{leftCoinId}
        and right_coin_id = #{rightCoinId}
        order by id desc limit 1

    </select>
    <select id="selectByleftCoinIdAndrightCoinIdAndTime" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from oax.trade
        where left_coin_id = #{leftCoinId}
        and right_coin_id = #{rightCoinId}
        and create_time between #{startTime} and #{endTime}
    </select>
    <select id="selectByMarketId" resultType="com.oax.entity.front.Trade">
        select
        <include refid="Base_Column_List"/>
        from oax.trade
        where market_id = #{marketId}
        order by id desc limit 1
    </select>

    <select id="getYesterdayAvgByMarketId" resultType="java.math.BigDecimal">
        SELECT AVG(price) FROM trade WHERE market_id = #{marketId} AND create_time >= (NOW() - INTERVAL 1 DAY )
    </select>

    <select id="getAvgByMarketIdAndTime" resultType="java.math.BigDecimal">
        SELECT AVG(price) FROM trade WHERE market_id = #{marketId} AND create_time >= #{startTime} AND create_time <![CDATA[<=]]> #{endTime}
    </select>

    <select id="getRatioByLeftIdAndRightId" resultType="java.math.BigDecimal">
        SELECT
        ifnull(price,0)
        FROM
        trade
        WHERE
        left_coin_id = #{leftCoinId} and right_coin_id = #{rightCoinId}
        ORDER BY id DESC
        LIMIT 0, 1
    </select>

    <select id="selectSumVoByCoinIdAndTime" resultType="com.oax.entity.front.vo.TradeSumVo">
        select
        fee
        from oax.trade
        where fee_coin_id = #{coinId}
        and create_time >= #{startTime}
        and #{endTime} >= create_time
    </select>


</mapper>